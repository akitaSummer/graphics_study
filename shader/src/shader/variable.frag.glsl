#ifdef GL_ES
precision mediump float;
#endif
//变量名只能包含英文字符、数字和下划线即(a-z、A-Z、0-9、_)
//# 1.变量定义
int resolution;   //只包含小写英文字母
int COUNT;        //只包含大写英文字母
int Position_a1;  //混合英文字符、数字和下划线

// //变量名的首字母不能是数字

 //int 2buffer;//错误

// //不能以 gl_ 、webgl或 webgl_ 开头，这些前缀已经被OpenGL ES 保留了

// int gl_arrays;     //错误
//int webgl_arrays;  //错误
 // webglarrays;  //错误

// //不能是GLSL ES内置的关键字和保留的关键字

// int const; //错误
// int class; //错误

// //2.变量基本类型

// //定义基本变量类型
// //下面是声明基本类型变量的例子： 

float klimt; //变量为一个浮点数 
int utrillo; //变量为一个整型数  
bool doga; //变量为一个布尔值

// //之前介绍过GLSL ES 是强类型的语言赋值时等号左右类型必须相同，接下来看看具体使用

int i = 6; //正确
float j = 6.; //错误，整形不能赋值给浮点数
// float j1 = 6.0; //正确
// bool b = true; //正确
// bool b1 = 1; //错误，整形不能赋值给布尔类型

// //通过以上例子发现不同类型无法直接赋值，不过我们可以使用内置函数int()、float() 和bool()来强制将转换成对应的类型，例如

float j1 = float(6); //将整形强转成浮点型然后赋值
bool b1 = bool(1); //将整形强转成布尔值然后赋值
// int i = int(true); //将布尔类型强转成整形赋值

//3.矢量
//vec4 a = vec4(1.,1.,1.,1.);
//ivec4 a = ivec4(1,1,1,1);
//      ivec4 a =  ivec4(1,2,2,2);
//         gl_FragColor = vec4(a);

// //4.矩阵
// //创建矩阵示例
// //向矩阵构造函数中传入一个或多个矢量，按照列主序使用矢量里的元素值来构造矩阵

// //使用两个vec2对象创建mat2对象
// vec2 v2_1 = vec2(1.0, 3.0);
// vec2 v2_2 = vec2(2.0, 4.0);
// mat2 m2_1 = mat2(v2_1,v2_2);//1.0 2.0
//                             //3.0 4.0

// //使用一个vec4对象创建mat2对象
// vec4 v4 = vec4(1.0, 3.0, 2.0, 4.0);
// mat2 m2_2 = mat2(v4);//1.0 2.0
//                      //3.0 4.0

// //同时传入数值和矢量对象创建mat2对象
// vec2 v2_3 = vec2(2.0, 4.0);
// //向矩阵构造函数中传入矢量和数值，按照列主序使用矢量里的元素值和直接传入的数值来构造矩阵。
// mat2 m2_3 = mat2(1.0, 3.0, v2_3);//1.0 2.0
//                                   //3.0 4.0

// //向矩阵构造函数中传入单个数值，生成对角线上都是该值，其余元素为0.0的矩阵
// mat4 m4 = mat4(3.0);//3.0 0.0 0.0 0.0
//                     //0.0 3.0 0.0 0.0
//                     //0.0 0.0 3.0 0.0
//                     //0.0 0.0 0.0 3.0  

// //注：与矢量的构造函数类似，如果传入参数数量大于1但又没有达到矩阵要求的数量，就会报错。
// //例如向mat4中传入三个参数就会报错，因为mat4构造函数需要传入16个元素

//ivec2 a = ivec4(1,1,1,1);

void main() {
    vec2 v2_1 = vec2(1.0, 3.0);
    vec2 v2_2 = vec2(2.0, 4.0);
    mat2 m2_1 = mat2(v2_1, v2_2);
    vec4 a = vec4(m2_1[0][0], m2_1[0][1], m2_1[1][0], m2_1[1][1]) / 255.;
    gl_FragColor = a;
}